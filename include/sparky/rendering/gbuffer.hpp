#ifndef __SPARKY_GBUFFER_HPP__
#define __SPARKY_GBUFFER_HPP__

/*
====================
CPP Includes
====================
*/
#include <array>		// Container for the frame buffer textures.
/*
====================
Additional Includes
====================
*/
#include <GLEW\glew.h>	// Generating and binding a frame buffer.

namespace sparky
{
	/*
	====================
	Enumerations
	====================
	*/
	enum eGBufferTexture
	{
		POSITION,
		NORMAL,
		DIFFUSE,
		MAX_AMOUNT
	};

	class GBuffer final
	{
	private:
		/*
		====================
		Member Variables
		====================
		*/
		GLuint m_fbo;								// The frame buffer object.
		std::array<GLuint, MAX_AMOUNT> m_textures;	// Textures of the GBuffer.
		GLuint m_depth;								// The current depth stencil.

	public:
		/*
		====================
		Ctor and Dtor
		====================
		*/
		////////////////////////////////////////////////////////////
		/// \brief Default constructor for the GBuffer object.
		///
		/// The constructor will set all of the texture handles and
		/// frame buffer to default values.
		///
		////////////////////////////////////////////////////////////
		explicit GBuffer(void);

		////////////////////////////////////////////////////////////
		/// \brief Destructor for the GBuffer object.
		///
		/// The destructor for the GBuffer will de-allocate the handles
		/// of the texture objects and delete the frame buffer object.
		///
		////////////////////////////////////////////////////////////
		~GBuffer(void);

		/*
		====================
		Methods
		====================
		*/
		////////////////////////////////////////////////////////////
		/// \brief Generates the frame buffer object and the textures of
		///		   of the GBuffer.
		///
		/// The frame buffer of the GBuffer is generated from combining the
		/// textures of each aspect of an object, such as the position,
		/// diffuse and normals. The depth is bound as a seperate buffer
		/// for correct depth testing.
		///
		////////////////////////////////////////////////////////////
		void generate(void);

		////////////////////////////////////////////////////////////
		/// \brief Binds the Frame Buffer of the GBuffer object.
		///
		/// When the GBuffer is bound, objects can be rendered into the frame
		/// buffer for use with deferred rendering.
		///
		////////////////////////////////////////////////////////////
		void bind(void) const;

		////////////////////////////////////////////////////////////
		/// \brief Unbinds the Frame Buffer of the GBuffer object.
		///
		/// When the Gbuffer no longer needs to be used, the GBuffer has
		/// to be unbound to switch the state of OpenGL.
		///
		////////////////////////////////////////////////////////////
		void unbind(void) const;

		////////////////////////////////////////////////////////////
		/// \brief Binds all of the textures bound by the Gbuffer object.
		///
		/// Before the GBuffer can be used within shaders, the textures
		/// generated by the frame buffer must be bound for use.
		///
		////////////////////////////////////////////////////////////
		void bindTextures(void) const;

		////////////////////////////////////////////////////////////
		/// \brief Unbinds all of the textures bound by the Gbuffer object.
		///
		/// When the textures do not need to be used within any shaders, the
		/// textures can be unbound and the state can be switched.
		///
		////////////////////////////////////////////////////////////
		void unbindTextures(void) const;
	};

}//namespace sparky

#endif//__SPARKY_GBUFFER_HPP__

////////////////////////////////////////////////////////////
/// \class sparky::GBuffer
/// \ingroup rendering
///
/// sparky::GBuffer is the most important class for the deferred rendering
/// aspect of the application. The information of the objects within
/// the scenes is generated and bound into textures, that can be
/// used and referenced within shaders.
///
/// sparky::GBuffer supplies the user a way to use a massive
/// amount of lights within a single scene and still maintain a
/// manageable frame-rate. Without Deferred rendering, this would
/// bring the application to a stand-still. Below is a code example.
///
/// \code
/// // Create a GBuffer object and generate.
/// sparky::GBuffer buffer;
/// buffer.generate();
///
/// // Bind the GBuffer for use and render objects into the buffer.
/// buffer.bind();
/// // Render objects here.
/// buffer.unbind();
///
/// // Bind the textures for use within a shader.
/// buffer.bindTextures();
///
////////////////////////////////////////////////////////////